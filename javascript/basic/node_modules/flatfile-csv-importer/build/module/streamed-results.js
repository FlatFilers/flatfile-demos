var StreamedResults = (function () {
    function StreamedResults(data, meta) {
        this.$meta = meta;
        this.$data = data;
    }
    Object.defineProperty(StreamedResults.prototype, "rawOutput", {
        /**
         * The raw output from the importer including all deleted rows
         * and sequence info
         */
        get: function () {
            return this.$data;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StreamedResults.prototype, "data", {
        /**
         * An array of valid data, key-mapped to the configuration provided
         * (alias of validData)
         */
        get: function () {
            return this.validData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StreamedResults.prototype, "validData", {
        /**
         * An array of valid data, key-mapped to the configuration provided
         */
        get: function () {
            return this.$data.filter(function (v) { return v.valid; })
                .filter(function (v) { return !v.deleted; })
                .map(function (v) { return v.data; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StreamedResults.prototype, "deletedData", {
        /**
         * Rows of data the user excluded from the final results,
         * key-mapped to the configuration provided
         */
        get: function () {
            return this.$data.filter(function (v) { return v.deleted; })
                .map(function (v) { return v.data; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StreamedResults.prototype, "allData", {
        /**
         * All data from the original file upload including deleted rows,
         * key-mapped to the configuration provided
         */
        get: function () {
            return this.$data.map(function (v) { return v.data; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StreamedResults.prototype, "remainingChunks", {
        /**
         * The number of remaining chunks in the stream
         */
        get: function () {
            return Math.ceil((this.totalChunks - this.currentChunk) / this.$meta.inChunks);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StreamedResults.prototype, "totalChunks", {
        /**
         * The total number of chunks that will have to be received before data processing is completed
         */
        get: function () {
            return Math.ceil(this.$meta.count_rows_accepted / this.$meta.inChunks);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StreamedResults.prototype, "chunkSize", {
        /**
         * The size of chunks as configured when requesting data.
         */
        get: function () {
            return this.$meta.inChunks;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StreamedResults.prototype, "currentChunk", {
        /**
         * The current chunk by index
         */
        get: function () {
            return (this.$meta.pointer + this.chunkSize) / this.chunkSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StreamedResults.prototype, "hasMore", {
        /**
         * The current chunk by index
         */
        get: function () {
            return this.$meta.hasMore;
        },
        enumerable: true,
        configurable: true
    });
    return StreamedResults;
}());
export default StreamedResults;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtZWQtcmVzdWx0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJlYW1lZC1yZXN1bHRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBO0lBV0UseUJBQWEsSUFBeUIsRUFBRSxJQUFrQjtRQUN4RCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtRQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtJQUNuQixDQUFDO0lBTUQsc0JBQUksc0NBQVM7UUFKYjs7O1dBR0c7YUFDSDtZQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFBO1FBQ25CLENBQUM7OztPQUFBO0lBTUQsc0JBQUksaUNBQUk7UUFKUjs7O1dBR0c7YUFDSDtZQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFBO1FBQ3ZCLENBQUM7OztPQUFBO0lBS0Qsc0JBQUksc0NBQVM7UUFIYjs7V0FFRzthQUNIO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEtBQUssRUFBUCxDQUFPLENBQUM7aUJBQ25DLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBVixDQUFVLENBQUM7aUJBQ3ZCLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEVBQU4sQ0FBTSxDQUFDLENBQUE7UUFDckIsQ0FBQzs7O09BQUE7SUFNRCxzQkFBSSx3Q0FBVztRQUpmOzs7V0FHRzthQUNIO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLE9BQU8sRUFBVCxDQUFTLENBQUM7aUJBQ3JDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEVBQU4sQ0FBTSxDQUFDLENBQUE7UUFDckIsQ0FBQzs7O09BQUE7SUFNRCxzQkFBSSxvQ0FBTztRQUpYOzs7V0FHRzthQUNIO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksRUFBTixDQUFNLENBQUMsQ0FBQTtRQUNwQyxDQUFDOzs7T0FBQTtJQUtELHNCQUFJLDRDQUFlO1FBSG5COztXQUVHO2FBQ0g7WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDaEYsQ0FBQzs7O09BQUE7SUFLRCxzQkFBSSx3Q0FBVztRQUhmOztXQUVHO2FBQ0g7WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDeEUsQ0FBQzs7O09BQUE7SUFLRCxzQkFBSSxzQ0FBUztRQUhiOztXQUVHO2FBQ0g7WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUE7UUFDNUIsQ0FBQzs7O09BQUE7SUFLRCxzQkFBSSx5Q0FBWTtRQUhoQjs7V0FFRzthQUNIO1lBQ0UsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUE7UUFDL0QsQ0FBQzs7O09BQUE7SUFLRCxzQkFBSSxvQ0FBTztRQUhYOztXQUVHO2FBQ0g7WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUE7UUFDM0IsQ0FBQzs7O09BQUE7SUFDSCxzQkFBQztBQUFELENBQUMsQUE1RkQsSUE0RkMifQ==