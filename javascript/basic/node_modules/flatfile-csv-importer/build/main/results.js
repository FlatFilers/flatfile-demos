"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var stats_1 = require("./stats");
var user_1 = require("./user");
var upload_file_1 = require("./upload-file");
var streamed_results_1 = require("./streamed-results");
var FlatfileResults = (function () {
    function FlatfileResults(data, meta, importer) {
        this.$meta = meta;
        this.$data = data;
        this.$importer = importer;
    }
    Object.defineProperty(FlatfileResults.prototype, "rawOutput", {
        /**
         * The raw output from the importer including all deleted rows
         * and sequence info
         */
        get: function () {
            return this.blobOnly(this.$data, 'rawOutput');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "data", {
        /**
         * An array of valid data, key-mapped to the configuration provided
         * (alias of validData)
         */
        get: function () {
            return this.blobOnly(this.validData, 'data');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "validData", {
        /**
         * An array of valid data, key-mapped to the configuration provided
         */
        get: function () {
            var res = this.$data.filter(function (v) { return v.valid; })
                .filter(function (v) { return !v.deleted; })
                .map(function (v) { return v.data; });
            return this.blobOnly(res, 'validData');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "deletedData", {
        /**
         * Rows of data the user excluded from the final results,
         * key-mapped to the configuration provided
         */
        get: function () {
            var res = this.$data.filter(function (v) { return v.deleted; })
                .map(function (v) { return v.data; });
            return this.blobOnly(res, 'deletedData');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "allData", {
        /**
         * All data from the original file upload including deleted rows,
         * key-mapped to the configuration provided
         */
        get: function () {
            return this.blobOnly(this.$data.map(function (v) { return v.data; }), 'allData');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "batchId", {
        /**
         * The uuid of the batch assigned by Flatfile (use this in internal
         * references for support purposes)
         */
        get: function () {
            return this.$meta.batchID;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "stats", {
        /**
         * Stats and counts about this file upload
         */
        get: function () {
            return new stats_1.default(this.$meta);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "customer", {
        /**
         * The customer provided in setCustomer
         */
        get: function () {
            if (this.$meta.endUser) {
                return new user_1.default(this.$meta.endUser);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "originalFile", {
        /**
         * A File object of the originally uploaded file stored as an AWS url
         */
        get: function () {
            if (this.$meta.originalFile) {
                return new upload_file_1.default(this.$meta.originalFile);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "csvFile", {
        /**
         * Same as originalFile unless it was uploaded in xls format, in which case this is the converted csv file stored as an AWS url
         */
        get: function () {
            if (this.$meta.originalFile) {
                if (this.$meta.originalFile.filetype === 'csv') {
                    return new upload_file_1.default(this.$meta.originalFile);
                }
                else {
                    if (this.$meta.csvFile) {
                        return new upload_file_1.default(this.$meta.csvFile);
                    }
                }
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "fileName", {
        /**
         * The filename of the originally uploaded file
         */
        get: function () {
            return this.$meta.filename || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "managed", {
        /**
         * If the final upload is managed by a private endpoint or not
         */
        get: function () {
            return this.$meta.managed || false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "manual", {
        /**
         * If the data was entered manually instead of via file upload or not
         */
        get: function () {
            return this.$meta.manual;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "config", {
        /**
         * The parsed and bootstrapped config object used by this importer instance
         */
        get: function () {
            return this.$meta.config;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "parsingConfig", {
        /**
         * The configuration used by the csv parser PapaParse: https://www.papaparse.com/docs#config
         */
        get: function () {
            return this.$meta.parsing_config;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "skippedRows", {
        /**
         * The invalid rows that were skipped on submission
         */
        get: function () {
            return this.$meta.skipped_rows || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "headersRaw", {
        /**
         * The headers before they were matched as given in the original file
         */
        get: function () {
            return this.$meta.headers_raw || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "headersMatched", {
        /**
         * The headers after they are matched
         */
        get: function () {
            return this.$meta.headers_matched || null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get the next chunk of records
     */
    FlatfileResults.prototype.nextChunk = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (!_this.$meta.inChunks) {
                return reject("\"nextChunk()\" is only accessible when using \"inChunks\". Please see docs for \"requestDataFromUser\".");
            }
            _this.$importer.$ready.then(function (child) {
                console.log('child.nextChunk()');
                child.nextChunk().then(function (data) {
                    console.log('nextChunk()', data);
                    resolve(data.results.length ? new streamed_results_1.default(data.results, data.meta) : null);
                }, function (err) {
                    console.log('nextChunk(err)', err);
                });
            });
        });
    };
    Object.defineProperty(FlatfileResults.prototype, "customColumns", {
        /**
         * An array of any columns that were created during import
         */
        get: function () {
            return this.$meta.custom_columns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "failureReason", {
        /**
         * The reason for the failure if there was a failure
         */
        get: function () {
            return this.$meta.failure_reason || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "submittedAt", {
        /**
         * The time that the data was submitted
         */
        get: function () {
            return this.$meta.submitted_at || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "failedAt", {
        /**
         * The time that the import failed if it failed
         */
        get: function () {
            return this.$meta.failed_at || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FlatfileResults.prototype, "createdAt", {
        /**
         * The time the data began the import, whether via file upload or manual data entry
         */
        get: function () {
            return this.$meta.created_at;
        },
        enumerable: true,
        configurable: true
    });
    FlatfileResults.prototype.blobOnly = function (v, method, alt) {
        if (alt === void 0) { alt = 'nextChunk()'; }
        if (this.$meta.inChunks) {
            throw new Error("\"" + method + "\" is not accessible when using \"inChunks\". Please see docs for \"" + alt + "\" instead.");
        }
        return v;
    };
    return FlatfileResults;
}());
exports.default = FlatfileResults;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdWx0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXN1bHRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUNBQTJCO0FBRzNCLCtCQUF5QjtBQUN6Qiw2Q0FBc0M7QUFDdEMsdURBQWdEO0FBRWhEO0lBZ0JFLHlCQUFhLElBQXlCLEVBQUUsSUFBVSxFQUFFLFFBQWtCO1FBQ3BFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFBO0lBQzNCLENBQUM7SUFNRCxzQkFBSSxzQ0FBUztRQUpiOzs7V0FHRzthQUNIO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxXQUFXLENBQUMsQ0FBQTtRQUMvQyxDQUFDOzs7T0FBQTtJQU1ELHNCQUFJLGlDQUFJO1FBSlI7OztXQUdHO2FBQ0g7WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFBO1FBQzlDLENBQUM7OztPQUFBO0lBS0Qsc0JBQUksc0NBQVM7UUFIYjs7V0FFRzthQUNIO1lBQ0UsSUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsS0FBSyxFQUFQLENBQU8sQ0FBQztpQkFDcEIsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFWLENBQVUsQ0FBQztpQkFDdkIsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksRUFBTixDQUFNLENBQUMsQ0FBQTtZQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFD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